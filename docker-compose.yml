services:
  # Nginx reverse proxy for Blue-Green deployment
  nginx:
    image: nginx:alpine
    container_name: express-nginx
    restart: unless-stopped
    ports:
      - "3000:80" # External access via port 3000
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - express-app-blue
    networks:
      - my-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 3s
      retries: 3

  # Blue environment (initially active)
  express-app-blue:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: express-app:latest
    container_name: express-app-blue
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - PORT=3000
      - NODE_ENV=${NODE_ENV:-production}
      - ENV_COLOR=blue
    networks:
      - my-network
    env_file:
      - .env
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})",
        ]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s

  # Green environment (for rolling deployment)
  express-app-green:
    build:
      context: .
      dockerfile: Dockerfile
    image: express-app:latest
    container_name: express-app-green
    restart: unless-stopped
    ports:
      - "3002:3000"
    environment:
      - PORT=3000
      - NODE_ENV=${NODE_ENV:-production}
      - ENV_COLOR=green
    networks:
      - my-network
    env_file:
      - .env
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})",
        ]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s
    profiles:
      - green # Start only when explicitly specified

networks:
  my-network:
    driver: bridge
